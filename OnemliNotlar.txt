			--Architecture Patterns(Mimari Patternler)--

			Architecture Patternlet, bir projenin sistematik işleyişinden (projede bulunan yapıların calısma mekanizmasından) sorumludur...Projenin tüm calısma mantıgı ve sistemsel işleyişi ile ilgilenen bir şablondur...Bozuldukları zaman proje cöker...

			Design Patternler ise , kesinlikle projenin sistematik işleyişiyle ilgilenmez(Proje nasıl calısacak nerelerden hangi assembly'ler alınacak vs...) Proje icerisinden cıkardıgınız zaman proje cökmez...Ancak performansı da ciddi ölcüde kaybeder...Projenin kurulumuna bir katkısı yoktur...Sadece mimari pattern ile uyum sağladığı sürece ciddi ölcüde performansını arttırır...

			--Yonetilebilirlik, ekip calısması ve performans acısından bütün sorumlulukları tek tek projelere ayırdığımız mimarilere Layered Architecture Pattern denir...Bunlardan N-Tier Architecture ve Onion Architecture en bilinenleridir...N-Tier Architecture Pattern bütün katmanların bagımsız olması prensibini uygulayarak ciddi ölcüde esneklik saglar... Tek bir projede hem veritabanı hem tasarım hem de class'ların tutulması bir hata durumunda esnekligi kısıtlayan bir yöntemdir...Ancak bütün görevler kendi sorumluluklarını uygulayan ayrı projelere verildigi takdirde daha fazla esneklik kazanıp aynı zamanda hataya daha hızlı müdahale edilmesini de mümkün hale getirecektir...Aynı zamanda ekip üyeleri de aynı anda calısabilirler...Ve performans acısından da sistemin daha hızlı calısması saglanacaktır...

			Katmanlı Mimari kullanmak icin aklınızdaki  projeyi görev yapacak ayrı ayrı parcalara ayırmalısınız...Projenin bütün halini bölerek yonetmeye calıstıgınızda ve her projeye kendi görevlerini yazdıgınız bir katmanlı mimari modeli uygulama işlemine gectiginizde N-Tier mimari paterni ortaya cıkmaktadır...

			Katmanlı Mimari profesyonel bir geleneksel yapıda minimum 5 katmandan olusursa en saglıklı Paterni sunar...İstendigi takdirde bagımsız olan bir katmanlı Mimari(Code First veya benzeri manuel yapılarla kullanılan bir katmanlı mimari) ihtiyaca göre ek katmanlar alarak kendisini geliştirebilir...Lakin bu ek katmanların cok dikkatli acılması gerekir...Normalde tek bir catı altında durması gereken yapıları ayırmamalısınız... Katmanlı mimari özgürlügümüzü kısıtlayan hazır yapılarda 4 ve hatta tavsiye edilmese bile 3 katmana düsebilir...

			Klasik DBFirst 3 katmanlı bir Architecture Patter'in katmanlarının görevleri:

			1=> DAL (Data Access Layer) - Veri Erişimi Katmanı : Solution'inizin sadece veritabanı ile ilgilenecek olan kısmıdır...DBFirst'te sadece veritabanı yansıması almayı saglarken sizi kısıtlayarak icerisine tablolarınızı temsil eden sınıflarınızı da alır(halbuki saglıklı bir N-Tier mimarisinde bu sınıfların da ayrı bir projede(katmanda) tutulması gerekir...) Yani CodeFirst yönteminde bu katmanın sorumlulugu böyle verilmemelidir...Yaratacagınız Context sınıfınızın DAL'de ayrı bir şekilde, diger sınıfların da ENTITES isimli baska bir katmanda ayrı bir şekilde tutulması gerekir...Context sınıfınızın icerisinde yapılan ayarlamalar DBFirst'te bu katman tarafından belirlense de  ayarlama işlemlerinin bile ayrı bir katmanda tutularak buraya referans verilmesi en saglıklısıdır...CodeFirst yapısı kullanıyorsanız bu ayarlama işlemleri de MAP isimli ayrı bir katmanda yapılmalıdır....

			2=> BLL (Business Logic Layer) - İş Mantığı Katmanı : Eger bir Framework'un size sunduğu metotlara özelleştirmek isterseniz veya ek olarak kendi metotlarınızı acmak isterseniz ve bu metotlar tüm her yerde kullanılacak metotlar olacaksa / ortak bir sınıf yaratmak isterseniz bu sınıf üzerinden tüm metotları yaratmak isterseniz ilgili yapıları bu katmanda toplarsınız...Aynı zamanda BLL katmanı N-Tier mimari paterninde tasarım paternlerinizin(design patterns) büyük bir cogunlugunun barındırılacagı yerdir...

			3=> Presentation (UI - User Interface) Layer - Sunum/ Kullanıcı arayüzü: Tasarım arayüzünüzdür..Kullanıcı bunu görür bunu kullanır...Burası sayesinde programınız calısır ve kullanılabilir...

			--------------------------------------------------------------------
			Katmanlı Mimaride Önemli Kurallar Vardır:
			1=> Bir mimaride birden fazla Presentation Layer bulunabilir(Form,Web,Mobile,API)...Ancak BLL,DAL,MAP katmanları bir tane olabilir..
			2=> Eger bir katman(proje) baska bir katmanı referans alıyorsa oraya referans vermez...Circular dependency yaratmıs olursunuz...Ortak yapılar icin illa belirli sınıflar kullanılacak baska bir ara katman acılır sınıflar oraya acılır ve katman iki tarafa ayrı referans verir...
			3=> Eger bir katmandan referans almıssanız,bu durum o katmanın aldıgı kendi referanslarını da alacagınız anlamına gelmez...Onları ayrı bir şekilde referans almalısınız....